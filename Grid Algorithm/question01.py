"""
<문제> 1이 될 때까지
    - 어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 합니다.
    단, 두 번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있습니다.
        1. N에서 1을 뺍니다.
        2. N을 K로 나눕니다.
    - N과 K가 주어질 때 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성하세요.

<풀이>
1. 최대한 많은 나누기를 실행하자.
"""

# N, K를 공백을 기준으로 구분하여 입력 받기
n, k = map(int, input().split())

result = 0

while True:
    target = (n // k) * k   # n이 k로 나누어 떨어지지 않을 때, 가장 가까운 k로 나누어 떨어지는 수가 어떤건지 알고싶을 때
    result += (n - target)  # target이 구해졌다면, n에서 target을 뺀 숫자만큼 1씩 빼야하므로 result에 더해준다. 즉, 한번에 계산이 된다.
    n = target              # 주어진 수 n을 target으로 치환한다.

    if n < k:               # n이 k보다 작다면, 더이상 나눌 수 없으므로 break
        break

    result += 1             # 작지 않다면, 한 번 더 나눠야 하므로 result를 1 증가시키고
    n //= k                 # n은 k로 나눈 몫을 저장한다. 다음 연산에 필요한 n값을 만드는 느낌

'''
정수가 주어지고 범위가 작으므로 k로 나누어 지는지 확인하고 나눠지지 않으면 1을 빼는 형태로 구현해도 되나,
위와같이 구현할 경우 엄청 큰 수가 들어와도 시간복잡도는 O(log)가 되므로 더 좋다.
'''

result += (n - 1)
print(result)